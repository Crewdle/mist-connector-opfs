!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var a in r)("object"==typeof exports?exports:e)[a]=r[a]}}(this,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{OPFSObjectStoreConnector:()=>a});const r=require("@crewdle/web-sdk");class a{storeKey;label;root;constructor(e,t){this.storeKey=e,this.label=t}async get(e){const[t,r]=await this.getFolderHandle(e);for await(const a of t.values()){if("directory"===a.kind)throw new Error(`Cannot get file: ${e}`);{const e=await t.getFileHandle(r);return await e.getFile()}}throw new Error(`Cannot get file: ${e}`)}async list(e,t=!1){try{const a=[],[o,i,n]=await this.getFolderHandle(e),c="/"===e?o:await o.getDirectoryHandle(i);for await(const e of c.values()){const o="/"+(n.length>0?n.join("/"):""),i=o.length>1?o+"/"+e.name:"/"+e.name;if("directory"===e.kind)a.push({kind:r.ObjectKind.Folder,name:e.name,path:o,pathName:i,entries:t?await this.list(i,t):[]});else{const t=await c.getFileHandle(e.name),n=await t.getFile();a.push({kind:r.ObjectKind.File,name:e.name,type:n.type,size:n.size,path:o,pathName:i})}}return a}catch(t){throw new Error(`Cannot list directory: ${e}`)}}async getOrCreateFolderHandle(e){try{let t=await this.getRootFolderHandle();if(e){const r=o(e);for(const e of r)t=await t.getDirectoryHandle(e,{create:!0})}return t}catch(t){throw new Error(`Cannot get or create directory: ${e}`)}}async getRootFolderHandle(){if(this.root)return this.root;const e=await navigator.storage.getDirectory(),t=await e.getDirectoryHandle(this.storeKey,{create:!0});return this.root=await t.getDirectoryHandle(this.label,{create:!0}),this.root}async getFolderHandle(e){try{let t=await this.getRootFolderHandle();if("/"===e)return[t,"",[]];const r=o(e);for(const[e,a]of r.entries()){if(e===r.length-1)return[t,a,r];t=await t.getDirectoryHandle(a)}}catch(t){throw new Error(`Cannot get directory: ${e}`)}throw new Error(`Cannot get directory: ${e}`)}async writeFile(e,t){try{const r=await this.getOrCreateFolderHandle(t),a=await r.getFileHandle(e.name,{create:!0}),o=await a.createWritable();await o.write(e),await o.close()}catch(r){throw new Error(`Cannot write file: ${i(t??"/",e.name)}`)}}async deleteObject(e){const[t,a]=await this.getFolderHandle(e);for await(const o of t.values())if(o.name===a)try{return"directory"===o.kind?(await t.removeEntry(a,{recursive:!0}),r.ObjectKind.Folder):(await t.removeEntry(a),r.ObjectKind.File)}catch(t){throw new Error(`Cannot delete file: ${e}`)}throw new Error(`Cannot delete file: ${e}`)}async moveObject(e,t){try{const[a,o]=await this.getFolderHandle(e);for await(const i of a.values())if(i.name===o){if("directory"===i.kind)return await this.moveDirectory(a,e,t),r.ObjectKind.Folder;{const i=await a.getFileHandle(o);return await this.moveFile(i,e,t),r.ObjectKind.File}}throw new Error(`Cannot move object: ${e}`)}catch(t){throw new Error(`Cannot publish move operation: ${e}`)}}async calculateSize(e){const t=await this.list(e);let a=0;for(const e of t)e.kind===r.ObjectKind.File?a+=e.size:a+=await this.calculateSize(e.pathName);return a}async moveFile(e,t,r){try{const a=await e.getFile(),o=r.split("/"),i=o.slice(-1),n=o.slice(0,o.length-1).join("/"),c=new File([a],i[0],{type:a.type});await this.writeFile(c,n),await this.deleteObject(t)}catch(e){throw new Error(`Cannot move file: ${t}`)}}async moveDirectory(e,t,r){try{await this.getOrCreateFolderHandle(r);const[a,i]=function(e){const t=o(e),r=t.pop()||"",a=t.join("/");return[0===a.length?"/":a,r]}(t),n=await e.getDirectoryHandle(i);await this.copyDirectory(n,t,r),await this.deleteObject(t)}catch(e){throw new Error(`Cannot move directory: ${t}`)}}async copyDirectory(e,t,a){const o=await this.list(t,!1);for(const t of o)if(t.kind===r.ObjectKind.Folder)await this.moveDirectory(e,t.pathName,i(a,t.name));else{const r=await e.getFileHandle(t.name);await this.moveFile(r,t.pathName,i(a,t.name))}}}function o(e){return e.split("/").filter((e=>e.length>0))}function i(e,t){return"/"===e?e+t:e+"/"+t}return t})()));